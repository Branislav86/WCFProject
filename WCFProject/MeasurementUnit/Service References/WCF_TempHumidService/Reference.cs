//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeasurementUnit.WCF_TempHumidService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyTemperatureMeasurement", Namespace="http://schemas.datacontract.org/2004/07/WCF_TempHumidService")]
    [System.SerializableAttribute()]
    public partial class MyTemperatureMeasurement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MyDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MyLocationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MyRMUnitNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MyValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MyDateTime {
            get {
                return this.MyDateTimeField;
            }
            set {
                if ((this.MyDateTimeField.Equals(value) != true)) {
                    this.MyDateTimeField = value;
                    this.RaisePropertyChanged("MyDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MyLocationName {
            get {
                return this.MyLocationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MyLocationNameField, value) != true)) {
                    this.MyLocationNameField = value;
                    this.RaisePropertyChanged("MyLocationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MyRMUnitName {
            get {
                return this.MyRMUnitNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MyRMUnitNameField, value) != true)) {
                    this.MyRMUnitNameField = value;
                    this.RaisePropertyChanged("MyRMUnitName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MyValue {
            get {
                return this.MyValueField;
            }
            set {
                if ((this.MyValueField.Equals(value) != true)) {
                    this.MyValueField = value;
                    this.RaisePropertyChanged("MyValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyHumidityMeasurement", Namespace="http://schemas.datacontract.org/2004/07/WCF_TempHumidService")]
    [System.SerializableAttribute()]
    public partial class MyHumidityMeasurement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MyDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MyLocationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MyRMUnitNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MyValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MyDateTime {
            get {
                return this.MyDateTimeField;
            }
            set {
                if ((this.MyDateTimeField.Equals(value) != true)) {
                    this.MyDateTimeField = value;
                    this.RaisePropertyChanged("MyDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MyLocationName {
            get {
                return this.MyLocationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MyLocationNameField, value) != true)) {
                    this.MyLocationNameField = value;
                    this.RaisePropertyChanged("MyLocationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MyRMUnitName {
            get {
                return this.MyRMUnitNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MyRMUnitNameField, value) != true)) {
                    this.MyRMUnitNameField = value;
                    this.RaisePropertyChanged("MyRMUnitName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MyValue {
            get {
                return this.MyValueField;
            }
            set {
                if ((this.MyValueField.Equals(value) != true)) {
                    this.MyValueField = value;
                    this.RaisePropertyChanged("MyValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyRMUnit", Namespace="http://schemas.datacontract.org/2004/07/WCF_TempHumidService")]
    [System.SerializableAttribute()]
    public partial class MyRMUnit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MyLocationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MyNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MyLocationName {
            get {
                return this.MyLocationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MyLocationNameField, value) != true)) {
                    this.MyLocationNameField = value;
                    this.RaisePropertyChanged("MyLocationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MyName {
            get {
                return this.MyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MyNameField, value) != true)) {
                    this.MyNameField = value;
                    this.RaisePropertyChanged("MyName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyMeasurements", Namespace="http://schemas.datacontract.org/2004/07/WCF_TempHumidService")]
    [System.SerializableAttribute()]
    public partial class MyMeasurements : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MyAverageHumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MyAverageTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeasurementUnit.WCF_TempHumidService.MyHumidityMeasurement[] MyHumMeasurementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeasurementUnit.WCF_TempHumidService.MyTemperatureMeasurement[] MyTempMeasurementsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MyAverageHumidity {
            get {
                return this.MyAverageHumidityField;
            }
            set {
                if ((this.MyAverageHumidityField.Equals(value) != true)) {
                    this.MyAverageHumidityField = value;
                    this.RaisePropertyChanged("MyAverageHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MyAverageTemperature {
            get {
                return this.MyAverageTemperatureField;
            }
            set {
                if ((this.MyAverageTemperatureField.Equals(value) != true)) {
                    this.MyAverageTemperatureField = value;
                    this.RaisePropertyChanged("MyAverageTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeasurementUnit.WCF_TempHumidService.MyHumidityMeasurement[] MyHumMeasurements {
            get {
                return this.MyHumMeasurementsField;
            }
            set {
                if ((object.ReferenceEquals(this.MyHumMeasurementsField, value) != true)) {
                    this.MyHumMeasurementsField = value;
                    this.RaisePropertyChanged("MyHumMeasurements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeasurementUnit.WCF_TempHumidService.MyTemperatureMeasurement[] MyTempMeasurements {
            get {
                return this.MyTempMeasurementsField;
            }
            set {
                if ((object.ReferenceEquals(this.MyTempMeasurementsField, value) != true)) {
                    this.MyTempMeasurementsField = value;
                    this.RaisePropertyChanged("MyTempMeasurements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF_TempHumidService.IMeasurementUnitService", CallbackContract=typeof(MeasurementUnit.WCF_TempHumidService.IMeasurementUnitServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMeasurementUnitService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementUnitService/GetAllLocations", ReplyAction="http://tempuri.org/IMeasurementUnitService/GetAllLocationsResponse")]
        string[] GetAllLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementUnitService/GetAllLocations", ReplyAction="http://tempuri.org/IMeasurementUnitService/GetAllLocationsResponse")]
        System.Threading.Tasks.Task<string[]> GetAllLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/Subscribe")]
        void Subscribe(string location);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementUnitService/Unsubscribe", ReplyAction="http://tempuri.org/IMeasurementUnitService/UnsubscribeResponse")]
        void Unsubscribe(string uuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementUnitService/Unsubscribe", ReplyAction="http://tempuri.org/IMeasurementUnitService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync(string uuid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/SendNewTemperatureMeasurement")]
        void SendNewTemperatureMeasurement(MeasurementUnit.WCF_TempHumidService.MyTemperatureMeasurement measurement);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/SendNewTemperatureMeasurement")]
        System.Threading.Tasks.Task SendNewTemperatureMeasurementAsync(MeasurementUnit.WCF_TempHumidService.MyTemperatureMeasurement measurement);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/SendNewHumidityMeasurement")]
        void SendNewHumidityMeasurement(MeasurementUnit.WCF_TempHumidService.MyHumidityMeasurement measurement);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/SendNewHumidityMeasurement")]
        System.Threading.Tasks.Task SendNewHumidityMeasurementAsync(MeasurementUnit.WCF_TempHumidService.MyHumidityMeasurement measurement);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasurementUnitServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/OnHumidityMeasurementSent")]
        void OnHumidityMeasurementSent(MeasurementUnit.WCF_TempHumidService.MyHumidityMeasurement measurement);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/OnTemperatureMeasurementSent")]
        void OnTemperatureMeasurementSent(MeasurementUnit.WCF_TempHumidService.MyTemperatureMeasurement measurement);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/OnSubcribe")]
        void OnSubcribe(MeasurementUnit.WCF_TempHumidService.MyRMUnit unit, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasurementUnitService/OnUnsubcribe")]
        void OnUnsubcribe(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasurementUnitServiceChannel : MeasurementUnit.WCF_TempHumidService.IMeasurementUnitService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeasurementUnitServiceClient : System.ServiceModel.DuplexClientBase<MeasurementUnit.WCF_TempHumidService.IMeasurementUnitService>, MeasurementUnit.WCF_TempHumidService.IMeasurementUnitService {
        
        public MeasurementUnitServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MeasurementUnitServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MeasurementUnitServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementUnitServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementUnitServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string[] GetAllLocations() {
            return base.Channel.GetAllLocations();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllLocationsAsync() {
            return base.Channel.GetAllLocationsAsync();
        }
        
        public void Subscribe(string location) {
            base.Channel.Subscribe(location);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(string location) {
            return base.Channel.SubscribeAsync(location);
        }
        
        public void Unsubscribe(string uuid) {
            base.Channel.Unsubscribe(uuid);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(string uuid) {
            return base.Channel.UnsubscribeAsync(uuid);
        }
        
        public void SendNewTemperatureMeasurement(MeasurementUnit.WCF_TempHumidService.MyTemperatureMeasurement measurement) {
            base.Channel.SendNewTemperatureMeasurement(measurement);
        }
        
        public System.Threading.Tasks.Task SendNewTemperatureMeasurementAsync(MeasurementUnit.WCF_TempHumidService.MyTemperatureMeasurement measurement) {
            return base.Channel.SendNewTemperatureMeasurementAsync(measurement);
        }
        
        public void SendNewHumidityMeasurement(MeasurementUnit.WCF_TempHumidService.MyHumidityMeasurement measurement) {
            base.Channel.SendNewHumidityMeasurement(measurement);
        }
        
        public System.Threading.Tasks.Task SendNewHumidityMeasurementAsync(MeasurementUnit.WCF_TempHumidService.MyHumidityMeasurement measurement) {
            return base.Channel.SendNewHumidityMeasurementAsync(measurement);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF_TempHumidService.IMeasurementClientService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMeasurementClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementClientService/ConnnectToServer", ReplyAction="http://tempuri.org/IMeasurementClientService/ConnnectToServerResponse")]
        string ConnnectToServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementClientService/ConnnectToServer", ReplyAction="http://tempuri.org/IMeasurementClientService/ConnnectToServerResponse")]
        System.Threading.Tasks.Task<string> ConnnectToServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementClientService/GetAllMeasurementsFromLocationDateTo" +
            "Date", ReplyAction="http://tempuri.org/IMeasurementClientService/GetAllMeasurementsFromLocationDateTo" +
            "DateResponse")]
        MeasurementUnit.WCF_TempHumidService.MyMeasurements GetAllMeasurementsFromLocationDateToDate(System.DateTime from, System.DateTime todate, string[] pars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementClientService/GetAllMeasurementsFromLocationDateTo" +
            "Date", ReplyAction="http://tempuri.org/IMeasurementClientService/GetAllMeasurementsFromLocationDateTo" +
            "DateResponse")]
        System.Threading.Tasks.Task<MeasurementUnit.WCF_TempHumidService.MyMeasurements> GetAllMeasurementsFromLocationDateToDateAsync(System.DateTime from, System.DateTime todate, string[] pars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementClientService/GetAllMeasuremensWithLimit", ReplyAction="http://tempuri.org/IMeasurementClientService/GetAllMeasuremensWithLimitResponse")]
        MeasurementUnit.WCF_TempHumidService.MyMeasurements GetAllMeasuremensWithLimit(float limit, string[] pars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementClientService/GetAllMeasuremensWithLimit", ReplyAction="http://tempuri.org/IMeasurementClientService/GetAllMeasuremensWithLimitResponse")]
        System.Threading.Tasks.Task<MeasurementUnit.WCF_TempHumidService.MyMeasurements> GetAllMeasuremensWithLimitAsync(float limit, string[] pars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementClientService/GetAverageMeasurementsFromLocation", ReplyAction="http://tempuri.org/IMeasurementClientService/GetAverageMeasurementsFromLocationRe" +
            "sponse")]
        MeasurementUnit.WCF_TempHumidService.MyMeasurements GetAverageMeasurementsFromLocation(string locatin, string[] pars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasurementClientService/GetAverageMeasurementsFromLocation", ReplyAction="http://tempuri.org/IMeasurementClientService/GetAverageMeasurementsFromLocationRe" +
            "sponse")]
        System.Threading.Tasks.Task<MeasurementUnit.WCF_TempHumidService.MyMeasurements> GetAverageMeasurementsFromLocationAsync(string locatin, string[] pars);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasurementClientServiceChannel : MeasurementUnit.WCF_TempHumidService.IMeasurementClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeasurementClientServiceClient : System.ServiceModel.ClientBase<MeasurementUnit.WCF_TempHumidService.IMeasurementClientService>, MeasurementUnit.WCF_TempHumidService.IMeasurementClientService {
        
        public MeasurementClientServiceClient() {
        }
        
        public MeasurementClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MeasurementClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ConnnectToServer() {
            return base.Channel.ConnnectToServer();
        }
        
        public System.Threading.Tasks.Task<string> ConnnectToServerAsync() {
            return base.Channel.ConnnectToServerAsync();
        }
        
        public MeasurementUnit.WCF_TempHumidService.MyMeasurements GetAllMeasurementsFromLocationDateToDate(System.DateTime from, System.DateTime todate, string[] pars) {
            return base.Channel.GetAllMeasurementsFromLocationDateToDate(from, todate, pars);
        }
        
        public System.Threading.Tasks.Task<MeasurementUnit.WCF_TempHumidService.MyMeasurements> GetAllMeasurementsFromLocationDateToDateAsync(System.DateTime from, System.DateTime todate, string[] pars) {
            return base.Channel.GetAllMeasurementsFromLocationDateToDateAsync(from, todate, pars);
        }
        
        public MeasurementUnit.WCF_TempHumidService.MyMeasurements GetAllMeasuremensWithLimit(float limit, string[] pars) {
            return base.Channel.GetAllMeasuremensWithLimit(limit, pars);
        }
        
        public System.Threading.Tasks.Task<MeasurementUnit.WCF_TempHumidService.MyMeasurements> GetAllMeasuremensWithLimitAsync(float limit, string[] pars) {
            return base.Channel.GetAllMeasuremensWithLimitAsync(limit, pars);
        }
        
        public MeasurementUnit.WCF_TempHumidService.MyMeasurements GetAverageMeasurementsFromLocation(string locatin, string[] pars) {
            return base.Channel.GetAverageMeasurementsFromLocation(locatin, pars);
        }
        
        public System.Threading.Tasks.Task<MeasurementUnit.WCF_TempHumidService.MyMeasurements> GetAverageMeasurementsFromLocationAsync(string locatin, string[] pars) {
            return base.Channel.GetAverageMeasurementsFromLocationAsync(locatin, pars);
        }
    }
}
